[tox]
envlist =
    build
    coverage_erase
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}{,-all_extras}
    coverage_report
labels =
    update=update
    prep-release=prep-release


[testenv]
description = Run the test suite ({env_name})
deps =
    -r requirements/test/requirements.txt
extras =
    all_extras: brotli,zstandard,zopfli
package = wheel
wheel_build_env = build_wheel
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}{,-all_extras}: coverage_erase
commands = coverage run -m pytest


[testenv:build]
description = Test builds
skip_install = True
deps =
    build
    twine
commands =
    python -m build .
    twine check --strict dist/*


[testenv:coverage_erase]
description = Erase .coverage* files before testing
skip_install = True
deps =
    coverage[toml]
commands =
    {envpython} -m coverage erase


[testenv:coverage_report]
description = Report code coverage after testing
skip_install = True
deps =
    coverage[toml]
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}{,-all_extras}
commands_pre =
    coverage combine
    coverage html --fail-under=0
commands =
    coverage report


[testenv:update]
description = Update tool dependency versions
base_python = py3.13
skip_install = True
recreate = True
deps =
    poetry
    poetry-plugin-export
    pre-commit
    upadup
commands =
    # Update test requirements
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes

    # Update pre-commit hook versions
    pre-commit autoupdate
    upadup


[testenv:prep-release]
description = Make the changes needed to create a new release PR
skip_install = true
deps =
    poetry
    scriv
passenv =
    VERSION
commands =
    poetry version "{env:VERSION}"
    scriv collect


[flake8]
max-line-length = 88
extend-ignore =
    E203,
    E501,
